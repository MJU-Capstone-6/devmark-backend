// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/MJU-Capstone-6/devmark-backend/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// INotificationService is an autogenerated mock type for the INotificationService type
type INotificationService struct {
	mock.Mock
}

// CreateNotificationHistory provides a mock function with given fields: _a0
func (_m *INotificationService) CreateNotificationHistory(_a0 repository.CreateNotificationHistoryParams) (*repository.NotificationHistory, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationHistory")
	}

	var r0 *repository.NotificationHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.CreateNotificationHistoryParams) (*repository.NotificationHistory, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repository.CreateNotificationHistoryParams) *repository.NotificationHistory); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.NotificationHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.CreateNotificationHistoryParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUnreadNotificationHistory provides a mock function with given fields: _a0
func (_m *INotificationService) FindUnreadNotificationHistory(_a0 int64) (*repository.UnreadNotification, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindUnreadNotificationHistory")
	}

	var r0 *repository.UnreadNotification
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*repository.UnreadNotification, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *repository.UnreadNotification); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.UnreadNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendUnreadBookmarkNotification provides a mock function with given fields:
func (_m *INotificationService) SendUnreadBookmarkNotification() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SendUnreadBookmarkNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewINotificationService creates a new instance of INotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewINotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *INotificationService {
	mock := &INotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
