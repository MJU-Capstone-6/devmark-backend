// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/MJU-Capstone-6/devmark-backend/internal/repository"
	responses "github.com/MJU-Capstone-6/devmark-backend/internal/responses"
	mock "github.com/stretchr/testify/mock"
)

// IRefreshTokenService is an autogenerated mock type for the IRefreshTokenService type
type IRefreshTokenService struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: _a0
func (_m *IRefreshTokenService) CreateToken(_a0 string) (*repository.RefreshToken, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *repository.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repository.RefreshToken, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *repository.RefreshToken); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByUserId provides a mock function with given fields: _a0
func (_m *IRefreshTokenService) FindOneByUserId(_a0 int) (*repository.RefreshToken, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByUserId")
	}

	var r0 *repository.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*repository.RefreshToken, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *repository.RefreshToken); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokens provides a mock function with given fields: _a0
func (_m *IRefreshTokenService) RefreshTokens(_a0 string) (*responses.RefreshAccessTokenResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 *responses.RefreshAccessTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*responses.RefreshAccessTokenResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *responses.RefreshAccessTokenResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.RefreshAccessTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateToken provides a mock function with given fields: _a0
func (_m *IRefreshTokenService) UpdateToken(_a0 repository.UpdateRefreshTokenParams) (*repository.RefreshToken, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateToken")
	}

	var r0 *repository.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.UpdateRefreshTokenParams) (*repository.RefreshToken, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repository.UpdateRefreshTokenParams) *repository.RefreshToken); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.UpdateRefreshTokenParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRefreshTokenService creates a new instance of IRefreshTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRefreshTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRefreshTokenService {
	mock := &IRefreshTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
