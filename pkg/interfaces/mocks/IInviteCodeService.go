// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/MJU-Capstone-6/devmark-backend/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// IInviteCodeService is an autogenerated mock type for the IInviteCodeService type
type IInviteCodeService struct {
	mock.Mock
}

// CreateCode provides a mock function with given fields: _a0
func (_m *IInviteCodeService) CreateCode(_a0 int) *string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateCode")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// CreateInviteCode provides a mock function with given fields: _a0
func (_m *IInviteCodeService) CreateInviteCode(_a0 repository.CreateInviteCodeParams) (*repository.InviteCode, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateInviteCode")
	}

	var r0 *repository.InviteCode
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.CreateInviteCodeParams) (*repository.InviteCode, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repository.CreateInviteCodeParams) *repository.InviteCode); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.InviteCode)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.CreateInviteCodeParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByWorkspaceID provides a mock function with given fields: id
func (_m *IInviteCodeService) FindByWorkspaceID(id int) (*repository.InviteCode, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByWorkspaceID")
	}

	var r0 *repository.InviteCode
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*repository.InviteCode, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *repository.InviteCode); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.InviteCode)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIInviteCodeService creates a new instance of IInviteCodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIInviteCodeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IInviteCodeService {
	mock := &IInviteCodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
