// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/MJU-Capstone-6/devmark-backend/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *IUserService) CreateUser(_a0 repository.CreateUserParams) (*repository.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.CreateUserParams) (*repository.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repository.CreateUserParams) *repository.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.CreateUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByUserName provides a mock function with given fields: _a0
func (_m *IUserService) FindUserByUserName(_a0 *string) (*repository.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUserName")
	}

	var r0 *repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*repository.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*string) *repository.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *IUserService) UpdateUser(_a0 repository.UpdateUserParams) (*repository.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.UpdateUserParams) (*repository.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repository.UpdateUserParams) *repository.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.UpdateUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
